import { domainOf, hasDomain } from "./domain.js";
import { throwInternalError } from "./errors.js";
import { objectKindOf } from "./objectKinds.js";
import { serializePrimitive } from "./primitive.js";
export const registry = {};
globalThis.$ark = registry;
const namesByResolution = new WeakMap();
const nameCounts = {};
export const register = (value) => {
    const existingName = namesByResolution.get(value);
    if (existingName)
        return existingName;
    let name = baseNameFor(value);
    if (nameCounts[name])
        name = `${name}${nameCounts[name]++}`;
    else
        nameCounts[name] = 1;
    registry[name] = value;
    namesByResolution.set(value, name);
    return name;
};
export const reference = (name) => `$ark.${name}`;
export const registeredReference = (value) => reference(register(value));
export const isDotAccessible = (keyName) => /^[a-zA-Z_$][a-zA-Z_$0-9]*$/.test(keyName);
export const compileSerializedValue = (value) => hasDomain(value, "object") || typeof value === "symbol" ?
    registeredReference(value)
    : serializePrimitive(value);
const baseNameFor = (value) => {
    switch (typeof value) {
        case "object": {
            if (value === null)
                break;
            const prefix = objectKindOf(value) ?? "object";
            // convert to camelCase
            return prefix[0].toLowerCase() + prefix.slice(1);
        }
        case "function":
            return isDotAccessible(value.name) ? value.name : "fn";
        case "symbol":
            return value.description && isDotAccessible(value.description) ?
                value.description
                : "symbol";
    }
    return throwInternalError(`Unexpected attempt to register serializable value of type ${domainOf(value)}`);
};
